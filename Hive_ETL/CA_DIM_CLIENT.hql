/*
##################################################################################################################
Purpose: 
		1. To consolidate data xref_client information and load into xref_client staging table.
		2. To consolidate data dim_client information and load into dim_client staging table.
		3. Create a Stage Tables that captures all the client information for BD CA
		4. Load the data to consolidate EDH Base table - EDH.DIM_CLIENT and EDH.XREF_CLIENT
##################################################################################################################
*/
elapsedtime ON;

/* Step 1: Truncate staging table temp_ca_client_account_date */
truncate TABLE
	EDH_STAGING.TEMP_CA_CLIENT_ACCOUNT_DATE;

/* Step 2: Insert client_address information from pbd_smartworks */
INSERT
	INTO
		EDH_STAGING.TEMP_CA_CLIENT_ACCOUNT_DATE SELECT
			bd_party_id,
			primary_client_id,
			MIN( DATEOPENED ) AS DATEOPENED,
			MAX( ACCT_CLOSE_DATE ) AS ACCT_CLOSE_DATE,
			MAX( created_date ) AS created_date,
			MAX( modified_Date ) AS modified_Date,
			MAX( status ) AS status,
			MIN(VIEW_STATUS) AS VIEW_STATUS,
			MAX( INSERT_LOAD_TS ) AS INSERT_LOAD_TS,
			MAX( LST_UPDATE_TS ) AS LST_UPDATE_TS
		FROM
			(
				SELECT
					bd_party_id,
					primary_client_id,
					T.DATEOPENED,
					T.ACCT_CLOSE_DATE,
					created_date,
					modified_Date,
					CASE
						WHEN T.VIEW_STATUS = 'ACTIVE' THEN 10
						WHEN T.VIEW_STATUS = 'SUPPRESSED' THEN 5
						WHEN T.VIEW_STATUS = 'NO POSITION' THEN 7
						ELSE 6
					END AS STATUS,
					T.VIEW_STATUS AS VIEW_STATUS,
					INSERT_LOAD_TS,
					LST_UPDATE_TS
				FROM
					PBD_SMARTWORKS.taccountinfo t --splice-properties useSpark=true
				WHERE
					bd_party_id = 4
			) a
		GROUP BY
			bd_party_id,
			primary_client_id;

/* Step 1: Truncate staging table temp_ca_cd_client */
truncate TABLE
	EDH_STAGING.TEMP_CA_CD_CLIENT;

/* Step 2: Insert client_address information from pbd_smartworks */
INSERT
	INTO
		EDH_STAGING.TEMP_CA_CD_CLIENT SELECT
			c.*,
			FIRST_VALUE(c.client_id) OVER(
				PARTITION BY C.bd_party_id,
				C.tax_id_nb
			ORDER BY
				c.MODIFIED_DATE DESC,
				c.CLIENT_ID DESC,
				CA.VIEW_STATUS
			) MIN_CLIENT_ID,
			TRIM( CAST( c.client_id AS CHAR( 38 ))) AS src_client_id,
			CAST(
				CASE
					WHEN CA.DATEOPENED IS NOT NULL THEN CA.DATEOPENED
					WHEN CA.created_date IS NOT NULL THEN CA.created_date
					WHEN CA.created_date IS NULL THEN C.created_date
					ELSE CA.DATEOPENED
				END AS DATE
			) AS XREF_EFF_START_DT,
			CAST(
				CASE
					WHEN CA.STATUS IN(
						10,
						7
					) THEN '2261-12-31'
					WHEN CA.STATUS = 5
					AND CA.ACCT_CLOSE_DATE IS NOT NULL THEN CA.ACCT_CLOSE_DATE
					WHEN CA.STATUS = 5
					AND CA.ACCT_CLOSE_DATE IS NULL THEN CA.modified_Date
					ELSE '2261-12-31'
				END AS DATE
			) AS XREF_EFF_END_DT,
			CASE
				WHEN CA.STATUS = 10
					 THEN 'ACTIVE'
				ELSE 'INACTIVE'
			END AS XREF_STATUS,
			'Y' AS XREF_CURRENT_FLG,
			'N' AS XREF_DELETED_FLG,
			c.tax_id_nb AS tax_id_nb_UP,
			ROW_NUMBER() OVER(
				PARTITION BY C.bd_party_id,
				tax_id_nb
			ORDER BY
				c.MODIFIED_DATE DESC,
				c.CLIENT_ID DESC,
				CA.VIEW_STATUS
			) RNK,
			'DELTA_LOAD' AS XREF_LOAD_JOB_ID,
			CASE
				WHEN COALESCE(ca.INSERT_LOAD_TS,cast('1900-01-01 00:00:00' AS TIMESTAMP)) > COALESCE(c.INSERT_LOAD_TS,cast('1900-01-01 00:00:00' AS TIMESTAMP)) THEN ca.INSERT_LOAD_TS
				ELSE c.INSERT_LOAD_TS
			END AS XREF_LOAD_TS,
			'DELTA_LOAD' AS XREF_LST_UPDT_JOB_ID,
			CASE
				WHEN COALESCE(ca.LST_UPDATE_TS,ca.INSERT_LOAD_TS) > COALESCE(C.LST_UPDATE_TS,c.INSERT_LOAD_TS) THEN COALESCE(ca.LST_UPDATE_TS,ca.INSERT_LOAD_TS)
				ELSE COALESCE(c.LST_UPDATE_TS,c.INSERT_LOAD_TS)
			END AS XREF_LST_UPDT_TS
		FROM
			PBD_SMARTWORKS.CD_CLIENT C --splice-properties useSpark=true
		LEFT OUTER JOIN EDH_STAGING.TEMP_CA_CLIENT_ACCOUNT_DATE CA ON
			C.BD_PARTY_ID = CA.bd_party_id
			AND C.CLIENT_ID = CA.PRIMARY_CLIENT_ID
		WHERE
			c.bd_party_id = 4;

/* Step 3: Truncate and reload staging table xref_client_ca */
TRUNCATE TABLE
	EDH_STAGING.XREF_CLIENT_CA;

INSERT
	INTO
		EDH_STAGING.XREF_CLIENT_CA(
			XREF_CLIENT_KEY,
			BD_ID,
			SRC_CLIENT_ID,
			TAX_ID_NB,
			RNK,
			EFF_START_DT,
			EFF_END_DT,
			STATUS,
			CURRENT_FLG,
			DELETED_FLG,
			COMMENTS,
			LOAD_JOB_ID,
			LOAD_TS,
			LST_UPDT_JOB_ID,
			LST_UPDT_TS
		) SELECT
			CONCAT( TRIM( CAST( bd_party_id AS CHAR( 5 ))), src_client_id ) AS XREF_CLIENT_KEY,
			bd_party_id,
			src_client_id,
			tax_id_nb,
			RNK,
			XREF_EFF_START_DT,
			XREF_EFF_END_DT,
			TRIM( XREF_STATUS ) XREF_STATUS,
			XREF_CURRENT_FLG,
			XREF_DELETED_FLG,
			'Rank is based on last modified date based on bd and tax id numnber' AS COMMENTS,
			TRIM(XREF_LOAD_JOB_ID),
			XREF_LOAD_TS,
			TRIM(XREF_LST_UPDT_JOB_ID),
			XREF_LST_UPDT_TS
		FROM
			EDH_STAGING.TEMP_CA_CD_CLIENT CA;

/* Step 4: Run Compaction and Analyze tables */
CALL SYSCS_UTIL.SYSCS_PERFORM_MAJOR_COMPACTION_ON_TABLE(
	'EDH_STAGING',
	'XREF_CLIENT_CA'
);

ANALYZE TABLE
	EDH_STAGING.XREF_CLIENT_CA;

/* Step 1: Truncate staging table temp_ca_client_account_date */
truncate TABLE
	EDH_STAGING.TEMP_CA_CD_CLIENT_ADDRESS;

/* Step 2: Insert client information from pbd_smartworks */
INSERT
	INTO
		EDH_STAGING.TEMP_CA_CD_CLIENT_ADDRESS SELECT
			*
		FROM
			(
				SELECT
					A.*,
					TRIM( CAST( c.client_id AS CHAR( 38 ))) AS CLIENT_ID_VARCHAR,
					ROW_NUMBER() OVER(
						PARTITION BY c.client_id,
						a.ADDRESS_TYPE
					ORDER BY
						a.MODIFIED_DATE DESC,
						a.ADDRESS_ID DESC
					) RNK
				FROM
					PBD_SMARTWORKS.CD_CLIENT C --splice-properties useSpark=true
				INNER JOIN PBD_SMARTWORKS.CD_CLIENT_ADDRESS a ON
					c.client_id = a.client_id
				WHERE
					c.bd_party_id = 4
			) b
		WHERE
			rnk = 1;

/* Step 1: Truncate staging table temp_ca_client_email */
truncate TABLE
	EDH_STAGING.TEMP_CA_CLIENT_EMAIL;

/* Step 2: Insert client information from pbd_smartworks */
INSERT
	INTO
		EDH_STAGING.TEMP_CA_CLIENT_EMAIL SELECT
			CLIENT_ID,
			CLIENT_ID_VARCHAR,
			MAX( CASE WHEN EMAIL_ID_TYPE = 'PRIMARY' THEN EMAIL_ID ELSE NULL END ) AS PRIMARY_EMAIL_ID,
			MAX( CASE WHEN EMAIL_ID_TYPE = 'SECONDARY' THEN EMAIL_ID ELSE NULL END ) AS SEC_EMAIL_ID
		FROM
			(
				SELECT
					c.CLIENT_ID,
					TRIM( CAST( c.client_id AS CHAR( 38 ))) AS CLIENT_ID_VARCHAR,
					EMAIL_ID AS EMAIL_ID,
					EMAIL_ID_TYPE AS EMAIL_ID_TYPE,
					ROW_NUMBER() OVER(
						PARTITION BY c.CLIENT_ID,
						EMAIL_ID_TYPE
					ORDER BY
						e.MODIFIED_DATE DESC
					) RNK
				FROM
					PBD_SMARTWORKS.CD_CLIENT C --splice-properties useSpark=true
				INNER JOIN PBD_SMARTWORKS.CD_CLIENT_EMAIL E ON
					c.client_id = e.client_id
				WHERE
					c.BD_PARTY_ID = 4
					AND(
						DELETED_FL != 'Y'
						OR DELETED_FL IS NULL
					)
					AND EMAIL_ID NOT LIKE '%TEST%'
					AND LENGTH(EMAIL_ID)< 100
			) A
		WHERE
			RNK = 1
		GROUP BY
			CLIENT_ID,
			CLIENT_ID_VARCHAR;

/* Step 1: Truncate staging table temp_ca_client_phone */
truncate TABLE
	EDH_STAGING.TEMP_CA_CLIENT_PHONE;

/* Step 2: Insert client information from pbd_smartworks */
INSERT
	INTO
		EDH_STAGING.TEMP_CA_CLIENT_PHONE SELECT
			p.CLIENT_ID,
			TRIM( CAST( p.client_id AS CHAR( 38 ))) AS CLIENT_ID_VARCHAR,
			MAX( CASE WHEN PHONE_NUMBER_TYPE = 'CELL' THEN PHONE_NUMBER ELSE NULL END ) AS CELL_NUMBER,
			MAX( CASE WHEN PHONE_NUMBER_TYPE = 'FAX' THEN PHONE_NUMBER ELSE NULL END ) AS FAX_NUMBER,
			MAX( CASE WHEN PHONE_NUMBER_TYPE = 'HOME' THEN PHONE_NUMBER ELSE NULL END ) AS HOME_NUMBER,
			MAX( CASE WHEN PHONE_NUMBER_TYPE = 'BUSINESS' THEN PHONE_NUMBER ELSE NULL END ) AS BUNSINES_NUMBER
		FROM
			PBD_SMARTWORKS.CD_CLIENT_PHONE P --splice-properties useSpark=true
		INNER JOIN PBD_SMARTWORKS.CD_CLIENT c ON
			c.client_id = p.client_id
		WHERE
			c.BD_PARTY_ID = 4
			AND (DELETED_FL != 'Y'
			OR DELETED_FL IS NULL)
		GROUP BY
			p.CLIENT_ID;

/* Step 1: Truncate staging table temp_ca_cd_client_address_mail */
truncate TABLE
	EDH_STAGING.TEMP_CA_CD_CLIENT_ADDRESS_MAIL;

/* Step 2: Insert client information from pbd_smartworks */
INSERT
	INTO
		EDH_STAGING.TEMP_CA_CD_CLIENT_ADDRESS_MAIL 
SELECT 
            CLIENT_ID,
			ADDRESS_ID,
			ADDRESS_TYPE,
			CLIENT_ID_VARCHAR,
			RNK,
			ADDRESS_LINE1,
			ADDRESS_LINE2,
			CITY,
			STATE,
			ZIP,
			COUNTRY_CD,
			SOURCE,
			SOURCE_RECORD_ID,
			ATTENTION_LINE,
			INSERT_LOAD_TS,
			CASE WHEN INSERT_LOAD_TS > LST_UPDT_TS THEN INSERT_LOAD_TS ELSE LST_UPDT_TS END AS LST_UPDT_TS
			FROM(
SELECT
			CA.CLIENT_ID,
			CA.ADDRESS_ID,
			CA.ADDRESS_TYPE,
			CA.CLIENT_ID_VARCHAR,
			CA.RNK,
			A.ADDRESS_LINE1,
			A.ADDRESS_LINE2,
			A.CITY,
			A.STATE,
			A.ZIP,
			CASE WHEN A.COUNTRY_CD='USA' THEN 'US' ELSE A.COUNTRY_CD END AS COUNTRY_CD ,
			A.SOURCE,
			A.SOURCE_RECORD_ID,
			A.ATTENTION_LINE,			
			CASE
				WHEN COALESCE(ca.INSERT_LOAD_TS,cast('1900-01-01 00:00:00' AS TIMESTAMP)) > COALESCE(a.INSERT_LOAD_TS,cast('1900-01-01 00:00:00' AS TIMESTAMP)) THEN ca.INSERT_LOAD_TS
				ELSE a.INSERT_LOAD_TS
			END AS INSERT_LOAD_TS,
			CASE
				WHEN
					COALESCE(a.LST_UPDATE_TS,a.INSERT_LOAD_TS)
					> COALESCE(COALESCE(ca.LST_UPDATE_TS,ca.INSERT_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))
				THEN COALESCE(COALESCE(a.LST_UPDATE_TS,a.INSERT_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))
				ELSE COALESCE(COALESCE(ca.LST_UPDATE_TS,ca.INSERT_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))			
				
			END AS LST_UPDT_TS
		FROM
			EDH_STAGING.TEMP_CA_CD_CLIENT_ADDRESS CA --splice-properties useSpark=true
		LEFT OUTER JOIN PBD_SMARTWORKS.CD_ADDRESS A ON
			CA.ADDRESS_ID = A.ADDRESS_ID
		WHERE
			CA.ADDRESS_TYPE = 'MAIL'
			AND CA.RNK = 1)x;

/* Step 1: Truncate staging table temp_ca_cd_client_address_street */
truncate TABLE
	EDH_STAGING.TEMP_CA_CD_CLIENT_ADDRESS_STREET;

/* Step 2: Insert client information from pbd_smartworks */
INSERT
	INTO
		EDH_STAGING.TEMP_CA_CD_CLIENT_ADDRESS_STREET 
SELECT 
            CLIENT_ID,
			ADDRESS_ID,
			ADDRESS_TYPE,
			CLIENT_ID_VARCHAR,
			RNK,
			ADDRESS_LINE1,
			ADDRESS_LINE2,
			CITY,
			STATE,
			ZIP,
			COUNTRY_CD,
			SOURCE,
			SOURCE_RECORD_ID,
			ATTENTION_LINE,
			INSERT_LOAD_TS,
			CASE WHEN INSERT_LOAD_TS > LST_UPDT_TS THEN INSERT_LOAD_TS ELSE LST_UPDT_TS END AS LST_UPDT_TS
			FROM(
SELECT
			CA.CLIENT_ID,
			CA.ADDRESS_ID,
			CA.ADDRESS_TYPE,
			CA.CLIENT_ID_VARCHAR,
			CA.RNK,
			A.ADDRESS_LINE1,
			A.ADDRESS_LINE2,
			A.CITY,
			A.STATE,
			A.ZIP,
			CASE WHEN A.COUNTRY_CD='USA' THEN 'US' ELSE A.COUNTRY_CD END AS COUNTRY_CD ,
			A.SOURCE,
			A.SOURCE_RECORD_ID,
			A.ATTENTION_LINE,			
			CASE
				WHEN COALESCE(ca.INSERT_LOAD_TS,cast('1900-01-01 00:00:00' AS TIMESTAMP)) > COALESCE(a.INSERT_LOAD_TS,cast('1900-01-01 00:00:00' AS TIMESTAMP)) THEN ca.INSERT_LOAD_TS
				ELSE a.INSERT_LOAD_TS
			END AS INSERT_LOAD_TS,
			CASE
				WHEN
					COALESCE(a.LST_UPDATE_TS,a.INSERT_LOAD_TS)
					> COALESCE(COALESCE(ca.LST_UPDATE_TS,ca.INSERT_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))
				THEN COALESCE(COALESCE(a.LST_UPDATE_TS,a.INSERT_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))
				ELSE COALESCE(COALESCE(ca.LST_UPDATE_TS,ca.INSERT_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))			
				
			END AS LST_UPDT_TS
		FROM
			EDH_STAGING.TEMP_CA_CD_CLIENT_ADDRESS CA --splice-properties useSpark=true
		LEFT OUTER JOIN PBD_SMARTWORKS.CD_ADDRESS A ON
			CA.ADDRESS_ID = A.ADDRESS_ID
		WHERE
			CA.ADDRESS_TYPE = 'STREET'
			AND CA.RNK = 1)x;

/* Step 3: Truncate and reload staging table dim_client_ca */
TRUNCATE TABLE
	EDH_STAGING.DIM_CLIENT_CA;

INSERT
	INTO
		EDH_STAGING.DIM_CLIENT_CA(
			DIM_CLIENT_KEY,
			BD_ID,
			SRC_CLIENT_ID,
			TAX_ID_NB,
			TAX_ID_TYPE,
			FIRST_NM,
			MIDDLE_NM,
			LAST_NM,
			DOB,
			GENDER,
			MARITAL_STATUS,
			DOMICILE_STATE,
			MAILING_ADDRESS_LINE1,
			MAILING_ADDRESS_LINE2,
			MAILING_CITY,
			MAILING_STATE,
			MAILING_ZIP,
			MAILING_COUNTRY,
			HOME_PHONE_NUMBER,
			MOBILE_PHONE_NUMBER,
			FAX_NUMBER,
			EMAIL_ADDRESS,
			STATUS,
			CURRENT_FLG,
			DELETED_FLG,
			EFF_START_DT,
			EFF_END_DT,
			LOAD_JOB_ID,
			LOAD_TS,
			LST_UPDT_JOB_ID,
			LST_UPDT_TS
		) SELECT DIM_CLIENT_KEY,
			BD_ID,
			SRC_CLIENT_ID,
			TAX_ID_NB,
			TAX_ID_TYPE,
			FIRST_NM,
			MIDDLE_NM,
			LAST_NM,
			DOB,
			GENDER,
			MARITAL_STATUS,
			DOMICILE_STATE,
			MAILING_ADDRESS_LINE1,
			MAILING_ADDRESS_LINE2,
			MAILING_CITY,
			MAILING_STATE,
			MAILING_ZIP,
			MAILING_COUNTRY,
			HOME_PHONE_NUMBER,
			MOBILE_PHONE_NUMBER,
			FAX_NUMBER,
			EMAIL_ADDRESS,
			STATUS,
			CURRENT_FLG,
			DELETED_FLG,
			EFF_START_DT,
			EFF_END_DT,
			LOAD_JOB_ID,
			LOAD_TS,
			LST_UPDT_JOB_ID,
			CASE WHEN LOAD_TS > LST_UPDT_TS THEN LOAD_TS ELSE LST_UPDT_TS END AS LST_UPDT_TS  FROM (
		SELECT
			CONCAT( TRIM( CAST( c.bd_party_id AS CHAR( 5 ))), TRIM( CAST( c.MIN_CLIENT_ID AS CHAR( 30 )))) AS DIM_CLIENT_KEY,
			c.bd_party_id AS bd_id,
			c.SRC_CLIENT_ID,
			C.tax_id_nb_UP AS tax_id_nb,
			CASE
				WHEN c.tax_id_type = '1' THEN 'TAXID'
				WHEN c.tax_id_type = '2' THEN 'SSN'
				ELSE 'UNKNOWN'
			END AS tax_id_type,
			C.FIRST_NAME AS FIRST_NM,
			C.MIDDLE_NAME AS MIDDLE_NM,
			C.LAST_NAME AS LAST_NM,
			CAST(
				C.BIRTHDATE AS DATE
			) AS DOB,
			CASE WHEN C.GENDER IS NULL THEN 'UNKNOWN' ELSE C.GENDER END AS GENDER,
			CASE WHEN C.MARITAL_STATUS IS NULL THEN 'UNKNOWN' ELSE C.MARITAL_STATUS END AS MARITAL_STATUS,
			CASE
				WHEN CAS.STATE IS NULL THEN CAM.STATE
				ELSE CAS.STATE
			END AS DOMICILE_STATE,
			CASE
				WHEN CAM.ADDRESS_LINE1 IS NULL THEN CAS.ADDRESS_LINE1
				ELSE CAM.ADDRESS_LINE1
			END AS MAILING_ADDRESS_LINE1,
			CASE
				WHEN CAM.ADDRESS_LINE1 IS NULL THEN CAS.ADDRESS_LINE2
				ELSE CAM.ADDRESS_LINE2
			END AS MAILING_ADDRESS_LINE2,
			CASE
				WHEN CAM.ADDRESS_LINE1 IS NULL THEN CAS.CITY
				ELSE CAM.CITY
			END AS MAILING_CITY,
			CASE
				WHEN CAM.ADDRESS_LINE1 IS NULL THEN CAS.STATE
				ELSE CAM.STATE
			END AS MAILING_STATE,
			CASE
				WHEN CAM.ADDRESS_LINE1 IS NULL THEN CAS.ZIP
				ELSE CAM.ZIP
			END AS MAILING_ZIP,
			CASE
				WHEN CAM.ADDRESS_LINE1 IS NULL THEN CAS.COUNTRY_CD
				ELSE CAM.COUNTRY_CD
			END AS MAILING_COUNTRY,
			PHNE.HOME_NUMBER HOME_PHONE_NUMBER,
			PHNE.CELL_NUMBER MOBILE_PHONE_NUMBER,
			PHNE.FAX_NUMBER,
			/*--PHNE.BUNSINES_NUMBER,*/
 CASE
				WHEN PRIMARY_EMAIL_ID IS NULL THEN SEC_EMAIL_ID
				ELSE PRIMARY_EMAIL_ID
			END AS EMAIL_ADDRESS,
			TRIM( c.XREF_status ) STATUS,
			c.XREF_current_flg CURRENT_FLG,
			c.XREF_DELETED_FLG DELETED_FLG,
			CAST(
				c.XREF_EFF_START_DT AS DATE
			) AS EFF_START_DT,
			CAST(
				c.XREF_EFF_END_DT AS DATE
			) AS EFF_end_DT,
			'INITIAL_LOAD' AS LOAD_JOB_ID,
			CASE
				WHEN COALESCE (c.XREF_LOAD_TS ,cast('1900-01-01 00:00:00' AS TIMESTAMP)) >= COALESCE ( CAM.INSERT_LOAD_TS,cast('1900-01-01 00:00:00' AS TIMESTAMP))
				AND COALESCE (c.XREF_LOAD_TS ,cast('1900-01-01 00:00:00' AS TIMESTAMP)) >=  COALESCE (CAS.INSERT_LOAD_TS ,cast('1900-01-01 00:00:00' AS TIMESTAMP)) THEN c.XREF_LOAD_TS
				WHEN COALESCE ( CAM.INSERT_LOAD_TS,cast('1900-01-01 00:00:00' AS TIMESTAMP)) >= COALESCE (c.XREF_LOAD_TS ,cast('1900-01-01 00:00:00' AS TIMESTAMP))
				AND COALESCE ( CAM.INSERT_LOAD_TS,cast('1900-01-01 00:00:00' AS TIMESTAMP)) >= COALESCE (CAS.INSERT_LOAD_TS,cast('1900-01-01 00:00:00' AS TIMESTAMP)) THEN CAM.INSERT_LOAD_TS
				WHEN COALESCE (CAS.INSERT_LOAD_TS ,cast('1900-01-01 00:00:00' AS TIMESTAMP)) >= COALESCE (c.XREF_LOAD_TS ,cast('1900-01-01 00:00:00' AS TIMESTAMP))
				AND COALESCE (CAS.INSERT_LOAD_TS ,cast('1900-01-01 00:00:00' AS TIMESTAMP)) >= COALESCE ( CAM.INSERT_LOAD_TS,cast('1900-01-01 00:00:00' AS TIMESTAMP)) THEN CAS.INSERT_LOAD_TS
				ELSE C.XREF_LOAD_TS
			END AS LOAD_TS,
			'INITIAL_LOAD' AS LST_UPDT_JOB_ID,
			CASE
				WHEN COALESCE(COALESCE(c.XREF_LST_UPDT_TS,C.XREF_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))>= COALESCE(COALESCE(cam.LST_UPDT_TS,cam.INSERT_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))
				AND COALESCE(COALESCE(c.XREF_LST_UPDT_TS,C.XREF_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))>= COALESCE(COALESCE(cas.LST_UPDT_TS,cas.INSERT_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP)) 
				THEN  COALESCE(c.XREF_LST_UPDT_TS,C.XREF_LOAD_TS)
				
				WHEN COALESCE(COALESCE(cam.LST_UPDT_TS,Cam.INSERT_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))>= COALESCE(COALESCE(c.XREF_LST_UPDT_TS,c.XREF_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))
				AND COALESCE(COALESCE(cam.LST_UPDT_TS,Cam.INSERT_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))>= COALESCE(COALESCE(cas.LST_UPDT_TS,cas.INSERT_LOAD_TS) ,cast('1900-01-01 00:00:00' AS TIMESTAMP))
				THEN COALESCE(cam.LST_UPDT_TS,Cam.INSERT_LOAD_TS)
				
				WHEN COALESCE(COALESCE(cas.LST_UPDT_TS,Cas.INSERT_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))>= COALESCE(COALESCE(c.XREF_LST_UPDT_TS,c.XREF_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))
				AND COALESCE(COALESCE(cas.LST_UPDT_TS,Cas.INSERT_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))>= COALESCE(COALESCE(cam.LST_UPDT_TS,cam.INSERT_LOAD_TS),cast('1900-01-01 00:00:00' AS TIMESTAMP))
				THEN COALESCE(cas.LST_UPDT_TS,Cas.INSERT_LOAD_TS)
				ELSE 
				COALESCE(c.XREF_LST_UPDT_TS,C.XREF_LOAD_TS)
			END AS LST_UPDT_TS
		FROM
			EDH_STAGING.TEMP_CA_CD_CLIENT C --splice-properties useSpark=true 
		LEFT OUTER JOIN EDH_STAGING.TEMP_CA_CD_CLIENT_ADDRESS_MAIL CAM ON
			C.SRC_CLIENT_ID = CAM.CLIENT_ID_VARCHAR
		LEFT OUTER JOIN EDH_STAGING.TEMP_CA_CD_CLIENT_ADDRESS_STREET CAS ON
			C.SRC_CLIENT_ID = CAS.CLIENT_ID_VARCHAR
		LEFT OUTER JOIN EDH_STAGING.TEMP_CA_CLIENT_PHONE PHNE ON
			c.SRC_CLIENT_ID = PHNE.CLIENT_ID_VARCHAR
		LEFT OUTER JOIN EDH_STAGING.TEMP_CA_CLIENT_EMAIL EM ON
			c.SRC_CLIENT_ID = EM.CLIENT_ID_VARCHAR
		WHERE
			C.rnk = 1) A;

/* Step 4: Run Compaction and Analyze tables */
CALL SYSCS_UTIL.SYSCS_PERFORM_MAJOR_COMPACTION_ON_TABLE(
	'EDH_STAGING',
	'DIM_CLIENT_CA'
);

ANALYZE TABLE
	EDH_STAGING.DIM_CLIENT_CA;
