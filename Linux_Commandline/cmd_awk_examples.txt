============== AWK Scripting ================

** AWK is a tool available in all Linux/Unix flavours.
** It is mainly used for processing text files and reporting.
** It can do text processing with ease when compared with other text parsing tools available in Linux/Unix.

--- AWK Advantages.

[1] Validte Data
[2] Managing small db files.
[3] Generating Reports.
[4] Parsing command outputs
[5] Parsing log files
[6] Can parse moe than one file at a time

--- AWK Disadvantages.

[1] Many flavours - awk, nawk, gawk, mawk, tawk
[2] Not full-fledged scripting language like PERL, Python and Ruby
[3] Useful only for data processing most of the time.

################################################################################################

--- Working sample file for this activity.

pskumarbehl@ubuntu:~$ cat db.txt
Ip,Henry 29 32 23 27
Frank,Joe 26 29 22 28
Gill,Marry 25 30 20 25
Avery,Adam 25 31 19 21
Chow,Samuel 23 29 19 25
Dible,Liz 22 30 20 22
Warn,Suzanne 23 29 19 23
Dow,Juila 24 29 20 20
Low,juila 22 21 19 18
Joe,Sarah 19 21 18 20


--- The syntax for awk command is as follows

[1] awk options 'awk-code' filename
[2] Linux-cmd | awk options 'awk-code'
[3] awk options -f awkscript-file filename

############### AWK print examples ################

--- Search for Dow word in the file and print matching lines.

pskumarbehl@ubuntu:~$ awk '/Dow/' db.txt
Dow,Juila 24 29 20 20


Note: Make sure the search word enclosed in forward slashes (//)

--- Search word with RegEx.

pskumarbehl@ubuntu:~$ awk '/[Jj]uila/' db.txt
Dow,Juila 24 29 20 20
Low,juila 22 21 19 18


--- Print particular column from the file.

pskumarbehl@ubuntu:~$ awk '{print $1}' db.txt
Ip,Henry
Frank,Joe
Gill,Marry
Avery,Adam
Chow,Samuel
Dible,Liz
Warn,Suzanne
Dow,Juila
Low,juila
Joe,Sarah

pskumarbehl@ubuntu:~$ awk '{print $5}' db.txt
27
28
25
21
25
22
23
20
18
20

pskumarbehl@ubuntu:~$ awk '{print $6}' db.txt










Note: If we try to print the column which not exist in the file it won't throw 
      any error but print as many blank lines as there in the file.
      
--- Printing multile columns from a given file.

pskumarbehl@ubuntu:~$ awk '{print $1,$3,$5}' db.txt
Ip,Henry 32 27
Frank,Joe 29 28
Gill,Marry 30 25
Avery,Adam 31 21
Chow,Samuel 29 25
Dible,Liz 30 22
Warn,Suzanne 29 23
Dow,Juila 29 20
Low,juila 21 18
Joe,Sarah 21 20

Note: These functionalities can be a possible use case for generating reports on log files.

** As visible from above output, looks a little messy. 

--- Print multiple columns with a formatted output eg a tab delimited column output.

pskumarbehl@ubuntu:~$ awk '{print $1,"\t",$3,"\t",$5}' db.txt
Ip,Henry 	 32 	 27
Frank,Joe 	 29 	 28
Gill,Marry 	 30 	 25
Avery,Adam 	 31 	 21
Chow,Samuel 	 29 	 25
Dible,Liz 	 30 	 22
Warn,Suzanne 	 29 	 23
Dow,Juila 	 29 	 20
Low,juila 	 21 	 18
Joe,Sarah 	 21 	 20

pskumarbehl@ubuntu:~$ awk '{print $1,"\t\t",$3,"\t\t",$5}' db.txt
Ip,Henry 		 32 		 27
Frank,Joe 		 29 		 28
Gill,Marry 		 30 		 25
Avery,Adam 		 31 		 21
Chow,Samuel 		 29 		 25
Dible,Liz 		 30 		 22
Warn,Suzanne 		 29 		 23
Dow,Juila 		 29 		 20
Low,juila 		 21 		 18
Joe,Sarah 		 21 		 20

pskumarbehl@ubuntu:~$ awk '{print $1,"----",$3,"----",$5}' db.txt
Ip,Henry ---- 32 ---- 27
Frank,Joe ---- 29 ---- 28
Gill,Marry ---- 30 ---- 25
Avery,Adam ---- 31 ---- 21
Chow,Samuel ---- 29 ---- 25
Dible,Liz ---- 30 ---- 22
Warn,Suzanne ---- 29 ---- 23
Dow,Juila ---- 29 ---- 20
Low,juila ---- 21 ---- 18
Joe,Sarah ---- 21 ---- 20

--- Search for a word and then print a particular column on the searched line.

pskumarbehl@ubuntu:~$ awk '/Chow/{print $3}' db.txt
29
pskumarbehl@ubuntu:~$ awk '/[Jj]uila/{print $3}' db.txt
29
21

--- Print a particular column value between two word matches.

pskumarbehl@ubuntu:~$ cat db.txt
Ip,Henry 29 32 23 27
Frank,Joe 26 29 22 28
Gill,Marry 25 30 20 25
Avery,Adam 25 31 19 21
Chow,Samuel 23 29 19 25
Dible,Liz 22 30 20 22
Warn,Suzanne 23 29 19 23
Dow,Juila 24 29 20 20
Low,juila 22 21 19 18
Joe,Sarah 19 21 18 20

pskumarbehl@ubuntu:~$ awk '/Frank/,/Low/{print $4}' db.txt
22
20
19
19
20
19
20
19

--- Print all lines with line number 5 onward.

Note: NR is an awk built-in.

pskumarbehl@ubuntu:~$ awk 'NR>5' db.txt
Dible,Liz 22 30 20 22
Warn,Suzanne 23 29 19 23
Dow,Juila 24 29 20 20
Low,juila 22 21 19 18
Joe,Sarah 19 21 18 20

pskumarbehl@ubuntu:~$ awk 'NR==5' db.txt
Chow,Samuel 23 29 19 25
pskumarbehl@ubuntu:~$ awk 'NR==4' db.txt
Avery,Adam 25 31 19 21
pskumarbehl@ubuntu:~$ awk 'NR==10' db.txt
Joe,Sarah 19 21 18 20

** There are 10 lines in the file db.txt.

pskumarbehl@ubuntu:~$ awk 'NR==12' db.txt
pskumarbehl@ubuntu:~$ awk 'NR==15' db.txt

Note: Accessing lines beyond 10 doesn't print any output but no error thrown.

pskumarbehl@ubuntu:~$ awk 'NR>4&&NR<9' db.txt
Chow,Samuel 23 29 19 25
Dible,Liz 22 30 20 22
Warn,Suzanne 23 29 19 23
Dow,Juila 24 29 20 20
pskumarbehl@ubuntu:~$ awk 'NR>4 && NR<9' db.txt
Chow,Samuel 23 29 19 25
Dible,Liz 22 30 20 22
Warn,Suzanne 23 29 19 23
Dow,Juila 24 29 20 20

Note: One notable point is no error on first command having no space 'NR>4&&NR<9'.

--- Print lines which have 29 in third column.

pskumarbehl@ubuntu:~$ awk '$3~/29/' db.txt
Frank,Joe 26 29 22 28
Chow,Samuel 23 29 19 25
Warn,Suzanne 23 29 19 23
Dow,Juila 24 29 20 20

--- Print column 5 if column 3 contains 31 in it.


    


